
dcmotor_switch1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e1  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000681  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <CW>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void CW(){
	PORTB|=(1<<PORTB5);
  80:	85 b1       	in	r24, 0x05	; 5
  82:	80 62       	ori	r24, 0x20	; 32
  84:	85 b9       	out	0x05, r24	; 5
	PORTB&=~(1<<PORTB4);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8f 7e       	andi	r24, 0xEF	; 239
  8a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	8b e7       	ldi	r24, 0x7B	; 123
  90:	92 e9       	ldi	r25, 0x92	; 146
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <CW+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <CW+0x1c>
  9c:	00 00       	nop
  9e:	08 95       	ret

000000a0 <STP>:
	_delay_ms(3000);
}

void STP(){
	PORTB&=~(1<<PORTB5);
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	85 b9       	out	0x05, r24	; 5
	PORTB&=~(1<<PORTB4);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <STP+0x12>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <STP+0x1c>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <CCW>:
	_delay_ms(1000);
}

void CCW(){
	PORTB&=~(1<<PORTB5);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	85 b9       	out	0x05, r24	; 5
	PORTB|=(1<<PORTB4);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	8b e7       	ldi	r24, 0x7B	; 123
  d0:	92 e9       	ldi	r25, 0x92	; 146
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <CCW+0x12>
  da:	00 c0       	rjmp	.+0      	; 0xdc <CCW+0x1c>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <main>:
	_delay_ms(3000);
}

int main(void)
{
	DDRD&=~(1<<DDD2);
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<5);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<4);
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	84 b9       	out	0x04, r24	; 4
	while (1)
	{
		if (PIND&(1<<PIND2))
  f2:	4a 9b       	sbis	0x09, 2	; 9
  f4:	09 c0       	rjmp	.+18     	; 0x108 <main+0x28>
		{
			CW(); // Clock wise
  f6:	0e 94 40 00 	call	0x80	; 0x80 <CW>
			STP(); // Stop
  fa:	0e 94 50 00 	call	0xa0	; 0xa0 <STP>
			CCW(); // Counter clock wise
  fe:	0e 94 60 00 	call	0xc0	; 0xc0 <CCW>
			STP(); // Stop
 102:	0e 94 50 00 	call	0xa0	; 0xa0 <STP>
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <main+0x12>
		}
		else
		{
			STP(); // Stop
 108:	0e 94 50 00 	call	0xa0	; 0xa0 <STP>
 10c:	f2 cf       	rjmp	.-28     	; 0xf2 <main+0x12>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
