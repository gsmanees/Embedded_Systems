
blink5LEDs_modular.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000811  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e7  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001967  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 76 00 	call	0xec	; 0xec <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer0_init>:

#include <avr/io.h>

void timer0_init()
{
	TCNT0=0;
  80:	16 bc       	out	0x26, r1	; 38
	OCR0A=249;
  82:	89 ef       	ldi	r24, 0xF9	; 249
  84:	87 bd       	out	0x27, r24	; 39
	TCCR0A|=(1<<WGM01); //ctc
  86:	84 b5       	in	r24, 0x24	; 36
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00)|(1<<CS02); // prescalar 1024
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	85 60       	ori	r24, 0x05	; 5
  90:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A);
  92:	85 b3       	in	r24, 0x15	; 21
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <delay_2s>:

void delay_2s()
{
	int i;
	
	timer0_init();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <timer0_init>
	
	
	{
	
		for (i=0; i<122; i++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <delay_2s+0x18>
		{
			while (!(TIFR0&(1<<OCF0A)));
  a4:	a9 9b       	sbis	0x15, 1	; 21
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <delay_2s+0xa>
			TIFR0|=(1<<OCF0A);
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 bb       	out	0x15, r24	; 21
	timer0_init();
	
	
	{
	
		for (i=0; i<122; i++)
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	2a 37       	cpi	r18, 0x7A	; 122
  b4:	31 05       	cpc	r19, r1
  b6:	b4 f3       	brlt	.-20     	; 0xa4 <delay_2s+0xa>
		}
		
		
	}
	
  b8:	08 95       	ret

000000ba <init_pins>:

#include <avr/io.h>

void init_pins()
{
	DDRB|=(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1);
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8e 63       	ori	r24, 0x3E	; 62
  be:	84 b9       	out	0x04, r24	; 4
  c0:	08 95       	ret

000000c2 <output_pins>:
}

void output_pins()
{
	PORTB^=(1<<PORTB5);
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	89 27       	eor	r24, r25
  c8:	85 b9       	out	0x05, r24	; 5
	PORTB^=(1<<PORTB4);
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	89 27       	eor	r24, r25
  d0:	85 b9       	out	0x05, r24	; 5
	PORTB^=(1<<PORTB3);
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	89 27       	eor	r24, r25
  d8:	85 b9       	out	0x05, r24	; 5
	PORTB^=(1<<PORTB2);
  da:	95 b1       	in	r25, 0x05	; 5
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	89 27       	eor	r24, r25
  e0:	85 b9       	out	0x05, r24	; 5
	PORTB^=(1<<PORTB1);
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	89 27       	eor	r24, r25
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	08 95       	ret

000000ec <main>:



int main(void)
{
    init_pins();
  ec:	0e 94 5d 00 	call	0xba	; 0xba <init_pins>
    while (1) 
    {
		output_pins();
  f0:	0e 94 61 00 	call	0xc2	; 0xc2 <output_pins>
		delay_2s();
  f4:	0e 94 4d 00 	call	0x9a	; 0x9a <delay_2s>
		PORTB&=0;
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	15 b8       	out	0x05, r1	; 5
		delay_2s();
  fc:	0e 94 4d 00 	call	0x9a	; 0x9a <delay_2s>
 100:	f7 cf       	rjmp	.-18     	; 0xf0 <main+0x4>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
