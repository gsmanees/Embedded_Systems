
uart_rx_letter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000011a  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078a  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8e:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
#define F_CPU 16000000UL
#include <avr/io.h>

void uart_init()
{
	UBRR0H=0;
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <uart_rx_letter>:
}

char uart_rx_letter()
{
	
	while(!(UCSR0A&(1<<RXC0)));
  b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ba:	88 23       	and	r24, r24
  bc:	e4 f7       	brge	.-8      	; 0xb6 <uart_rx_letter>
	return UDR0;
  be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c2:	08 95       	ret

000000c4 <uart_tx_string>:

void uart_tx_string(char *str)
{
  c4:	ac 01       	movw	r20, r24
	for (uint8_t i=0; str[i]!='\0'; i++)
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <uart_tx_string+0x14>
	{
		UDR0=str[i];
  ca:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while(!(UCSR0A&(1<<UDRE0)));
  ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d2:	95 ff       	sbrs	r25, 5
  d4:	fc cf       	rjmp	.-8      	; 0xce <uart_tx_string+0xa>
	return UDR0;
}

void uart_tx_string(char *str)
{
	for (uint8_t i=0; str[i]!='\0'; i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	fa 01       	movw	r30, r20
  da:	e2 0f       	add	r30, r18
  dc:	f1 1d       	adc	r31, r1
  de:	90 81       	ld	r25, Z
  e0:	91 11       	cpse	r25, r1
  e2:	f3 cf       	rjmp	.-26     	; 0xca <uart_tx_string+0x6>
	{
		UDR0=str[i];
		while(!(UCSR0A&(1<<UDRE0)));
	}
}
  e4:	08 95       	ret

000000e6 <uart_tx_char>:

void uart_tx_char(char c)
{
	
	UDR0=c;
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while(!(UCSR0A&(1<<TXC0)));
  ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	86 ff       	sbrs	r24, 6
  f0:	fc cf       	rjmp	.-8      	; 0xea <uart_tx_char+0x4>
}
  f2:	08 95       	ret

000000f4 <main>:

int main(void)
{
	char c_rx;
	uart_init();
  f4:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	uart_tx_string("\nEnter a letter: ");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_tx_string>
	c_rx=uart_rx_letter();
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_rx_letter>
 104:	c8 2f       	mov	r28, r24
	uart_tx_string("\nYou entered: ");
 106:	82 e1       	ldi	r24, 0x12	; 18
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_tx_string>
	uart_tx_char(c_rx);
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 73 00 	call	0xe6	; 0xe6 <uart_tx_char>
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x20>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
