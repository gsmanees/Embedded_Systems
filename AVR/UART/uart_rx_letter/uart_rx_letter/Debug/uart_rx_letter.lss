
uart_rx_letter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c5  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  8e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
#include <avr/io.h>

void uart_init(unsigned long baud)
{
	unsigned int regVal=0;
	UCSR0A|=(1<<U2X0); // if not used , makes error for higher baud rates
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	20 81       	ld	r18, Z
  9c:	22 60       	ori	r18, 0x02	; 2
  9e:	20 83       	st	Z, r18
	regVal = (F_CPU/(8UL*baud))-1; // UL used for 32 bit unsigned long 
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	aa 1f       	adc	r26, r26
  aa:	bb 1f       	adc	r27, r27
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	aa 1f       	adc	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	9c 01       	movw	r18, r24
  b6:	ad 01       	movw	r20, r26
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	44 1f       	adc	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	74 e2       	ldi	r23, 0x24	; 36
  c4:	84 ef       	ldi	r24, 0xF4	; 244
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 ab 00 	call	0x156	; 0x156 <__udivmodsi4>
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
	UBRR0H= (regVal>>8); // to get the higher byte
  d0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=  regVal;
  d4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0); // rx and tx enabling 
  d8:	e1 ec       	ldi	r30, 0xC1	; 193
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 61       	ori	r24, 0x18	; 24
  e0:	80 83       	st	Z, r24
	
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00); // 8 bit transfer mode 
  e2:	e2 ec       	ldi	r30, 0xC2	; 194
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	86 60       	ori	r24, 0x06	; 6
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <uart_rx_letter>:
}

char uart_rx_letter()
{
	
	while(!(UCSR0A&(1<<RXC0))); // waits until receiving completes
  ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <uart_rx_letter>
	return UDR0;
  f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  fa:	08 95       	ret

000000fc <uart_tx_string>:

void uart_tx_string(char *str)
{
  fc:	ac 01       	movw	r20, r24
	for (uint8_t i=0; str[i]!='\0'; i++)
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <uart_tx_string+0x14>
	{
		UDR0=str[i];
 102:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while(!(UCSR0A&(1<<UDRE0))); // waiting until uart data register empty
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <uart_tx_string+0xa>
	return UDR0;
}

void uart_tx_string(char *str)
{
	for (uint8_t i=0; str[i]!='\0'; i++)
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	fa 01       	movw	r30, r20
 112:	e2 0f       	add	r30, r18
 114:	f1 1d       	adc	r31, r1
 116:	90 81       	ld	r25, Z
 118:	91 11       	cpse	r25, r1
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <uart_tx_string+0x6>
	{
		UDR0=str[i];
		while(!(UCSR0A&(1<<UDRE0))); // waiting until uart data register empty
	}
}
 11c:	08 95       	ret

0000011e <uart_tx_char>:

void uart_tx_char(char c)
{
	
	UDR0=c;
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while(!(UCSR0A&(1<<TXC0))); // waits until transmission completes
 122:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 126:	86 ff       	sbrs	r24, 6
 128:	fc cf       	rjmp	.-8      	; 0x122 <uart_tx_char+0x4>
}
 12a:	08 95       	ret

0000012c <main>:

int main(void)
{
	char c_rx;
	uart_init(9600);
 12c:	60 e8       	ldi	r22, 0x80	; 128
 12e:	75 e2       	ldi	r23, 0x25	; 37
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	uart_tx_string("\nEnter a letter: ");
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 7e 00 	call	0xfc	; 0xfc <uart_tx_string>
	c_rx=uart_rx_letter();
 140:	0e 94 77 00 	call	0xee	; 0xee <uart_rx_letter>
 144:	c8 2f       	mov	r28, r24
	uart_tx_string("\nYou entered: ");
 146:	82 e1       	ldi	r24, 0x12	; 18
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 7e 00 	call	0xfc	; 0xfc <uart_tx_string>
	uart_tx_char(c_rx);
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 8f 00 	call	0x11e	; 0x11e <uart_tx_char>
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0x28>

00000156 <__udivmodsi4>:
 156:	a1 e2       	ldi	r26, 0x21	; 33
 158:	1a 2e       	mov	r1, r26
 15a:	aa 1b       	sub	r26, r26
 15c:	bb 1b       	sub	r27, r27
 15e:	fd 01       	movw	r30, r26
 160:	0d c0       	rjmp	.+26     	; 0x17c <__udivmodsi4_ep>

00000162 <__udivmodsi4_loop>:
 162:	aa 1f       	adc	r26, r26
 164:	bb 1f       	adc	r27, r27
 166:	ee 1f       	adc	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	a2 17       	cp	r26, r18
 16c:	b3 07       	cpc	r27, r19
 16e:	e4 07       	cpc	r30, r20
 170:	f5 07       	cpc	r31, r21
 172:	20 f0       	brcs	.+8      	; 0x17c <__udivmodsi4_ep>
 174:	a2 1b       	sub	r26, r18
 176:	b3 0b       	sbc	r27, r19
 178:	e4 0b       	sbc	r30, r20
 17a:	f5 0b       	sbc	r31, r21

0000017c <__udivmodsi4_ep>:
 17c:	66 1f       	adc	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	1a 94       	dec	r1
 186:	69 f7       	brne	.-38     	; 0x162 <__udivmodsi4_loop>
 188:	60 95       	com	r22
 18a:	70 95       	com	r23
 18c:	80 95       	com	r24
 18e:	90 95       	com	r25
 190:	9b 01       	movw	r18, r22
 192:	ac 01       	movw	r20, r24
 194:	bd 01       	movw	r22, r26
 196:	cf 01       	movw	r24, r30
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
