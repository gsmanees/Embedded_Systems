
trafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ff  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000648  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_10s>:
{
	int i;
	int count=610;
	
	
	for (i=0; i<count; i++)
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	0c c0       	rjmp	.+24     	; 0x9e <delay_10s+0x1e>
	{
		TCNT0=0;
  86:	16 bc       	out	0x26, r1	; 38
		TCCR0A=0;
  88:	14 bc       	out	0x24, r1	; 36
		TCCR0B|=(1<<CS00)|(1<<CS02); // prescalar 1024
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
		TIFR0|=(1<<TOV0);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bb       	out	0x15, r24	; 21
		while (!(TIFR0&(1<<TOV0)));
  96:	a8 9b       	sbis	0x15, 0	; 21
  98:	fe cf       	rjmp	.-4      	; 0x96 <delay_10s+0x16>
{
	int i;
	int count=610;
	
	
	for (i=0; i<count; i++)
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	22 36       	cpi	r18, 0x62	; 98
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	38 07       	cpc	r19, r24
  a4:	84 f3       	brlt	.-32     	; 0x86 <delay_10s+0x6>
		TCCR0B|=(1<<CS00)|(1<<CS02); // prescalar 1024
		TIFR0|=(1<<TOV0);
		while (!(TIFR0&(1<<TOV0)));
	}
	
}
  a6:	08 95       	ret

000000a8 <delay_3s>:
{
	int i;
	int count=183;
	
	
	for (i=0; i<count; i++)
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <delay_3s+0x1e>
	{
		TCNT0=0;
  ae:	16 bc       	out	0x26, r1	; 38
		TCCR0A=0;
  b0:	14 bc       	out	0x24, r1	; 36
		TCCR0B|=(1<<CS00)|(1<<CS02); // prescalar 1024
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	85 60       	ori	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
		TIFR0|=(1<<TOV0);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	85 bb       	out	0x15, r24	; 21
		while (!(TIFR0&(1<<TOV0)));
  be:	a8 9b       	sbis	0x15, 0	; 21
  c0:	fe cf       	rjmp	.-4      	; 0xbe <delay_3s+0x16>
{
	int i;
	int count=183;
	
	
	for (i=0; i<count; i++)
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	27 3b       	cpi	r18, 0xB7	; 183
  c8:	31 05       	cpc	r19, r1
  ca:	8c f3       	brlt	.-30     	; 0xae <delay_3s+0x6>
		TCCR0A=0;
		TCCR0B|=(1<<CS00)|(1<<CS02); // prescalar 1024
		TIFR0|=(1<<TOV0);
		while (!(TIFR0&(1<<TOV0)));
	}
}
  cc:	08 95       	ret

000000ce <main>:

int main(void)
{
	DDRB|=(1<<DDB5)|(1<<DDB4)|(1<<DDB3);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	88 63       	ori	r24, 0x38	; 56
  d2:	84 b9       	out	0x04, r24	; 4
	
	while (1)
	{
		PORTB|=(1<<PORTB5); //red
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	85 b9       	out	0x05, r24	; 5
		delay_10s();
  da:	0e 94 40 00 	call	0x80	; 0x80 <delay_10s>
		PORTB&=~(1<<PORTB5);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	85 b9       	out	0x05, r24	; 5
		PORTB|=(1<<PORTB4); // yellow
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	85 b9       	out	0x05, r24	; 5
		delay_3s();
  ea:	0e 94 54 00 	call	0xa8	; 0xa8 <delay_3s>
		PORTB&=~(1<<PORTB4);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	85 b9       	out	0x05, r24	; 5
		PORTB|=(1<<PORTB3);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	85 b9       	out	0x05, r24	; 5
		delay_10s();
  fa:	0e 94 40 00 	call	0x80	; 0x80 <delay_10s>
		PORTB&=~(1<<PORTB3);
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	85 b9       	out	0x05, r24	; 5
 104:	e7 cf       	rjmp	.-50     	; 0xd4 <main+0x6>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
