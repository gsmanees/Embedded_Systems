
Bidirectional Motor with LED Feedback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_500ms_normal>:

void delay_500ms_normal()
{
	int i;
	int count=30;
	for (i=0; i<count; i++)
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	0c c0       	rjmp	.+24     	; 0x9e <delay_500ms_normal+0x1e>
	{
		TCNT0=0;
  86:	16 bc       	out	0x26, r1	; 38
		TCCR0A=0; // timer 0 normal delay used
  88:	14 bc       	out	0x24, r1	; 36
		TCCR0B|=(1<<CS00)|(1<<CS02); // pre scalar 1024 used
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
		TIFR0|=(1<<TOV0); // flag cleared
  90:	85 b3       	in	r24, 0x15	; 21
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bb       	out	0x15, r24	; 21
		while (!(TIFR0&(1<<TOV0)));
  96:	a8 9b       	sbis	0x15, 0	; 21
  98:	fe cf       	rjmp	.-4      	; 0x96 <delay_500ms_normal+0x16>

void delay_500ms_normal()
{
	int i;
	int count=30;
	for (i=0; i<count; i++)
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	2e 31       	cpi	r18, 0x1E	; 30
  a0:	31 05       	cpc	r19, r1
  a2:	8c f3       	brlt	.-30     	; 0x86 <delay_500ms_normal+0x6>
		TCCR0A=0; // timer 0 normal delay used
		TCCR0B|=(1<<CS00)|(1<<CS02); // pre scalar 1024 used
		TIFR0|=(1<<TOV0); // flag cleared
		while (!(TIFR0&(1<<TOV0)));
	}
}
  a4:	08 95       	ret

000000a6 <main>:

int main(void)
{
    DDRB|=(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8c 63       	ori	r24, 0x3C	; 60
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD&=~(1<<DDD0);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	
    while (1) 
    {
		int i;
		// B2 = RIGHT LED, B5 = LEFT LED
		PORTB|=(1<<PORTB2)|(1<<PORTB4); // 
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	84 61       	ori	r24, 0x14	; 20
  b6:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(PORTB3);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8c 7f       	andi	r24, 0xFC	; 252
  bc:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PORTB5);
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	85 b9       	out	0x05, r24	; 5
		
		for (i=0; i<5; i++)
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <main+0x3a>
		{
			PORTB|=(1<<PORTB2);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	85 b9       	out	0x05, r24	; 5
			delay_500ms_normal();
  d0:	0e 94 40 00 	call	0x80	; 0x80 <delay_500ms_normal>
			PORTB&=~(1<<PORTB2);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	85 b9       	out	0x05, r24	; 5
			delay_500ms_normal();
  da:	0e 94 40 00 	call	0x80	; 0x80 <delay_500ms_normal>
		// B2 = RIGHT LED, B5 = LEFT LED
		PORTB|=(1<<PORTB2)|(1<<PORTB4); // 
		PORTB&=~(PORTB3);
		PORTB&=~(1<<PORTB5);
		
		for (i=0; i<5; i++)
  de:	21 96       	adiw	r28, 0x01	; 1
  e0:	c5 30       	cpi	r28, 0x05	; 5
  e2:	d1 05       	cpc	r29, r1
  e4:	94 f3       	brlt	.-28     	; 0xca <main+0x24>
			delay_500ms_normal();
			PORTB&=~(1<<PORTB2);
			delay_500ms_normal();
		}
	
		PORTB&=0;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	15 b8       	out	0x05, r1	; 5
		delay_500ms_normal();
  ea:	0e 94 40 00 	call	0x80	; 0x80 <delay_500ms_normal>
		//delay_1s_ctc();
		PORTB|=(1<<PORTB3)|(1<<PORTB5);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	88 62       	ori	r24, 0x28	; 40
  f2:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PORTB2);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	85 b9       	out	0x05, r24	; 5
		for (i=0; i<5; i++)
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	0b c0       	rjmp	.+22     	; 0x116 <main+0x70>
		{
			PORTB|=(1<<PORTB5);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	80 62       	ori	r24, 0x20	; 32
 104:	85 b9       	out	0x05, r24	; 5
			delay_500ms_normal();
 106:	0e 94 40 00 	call	0x80	; 0x80 <delay_500ms_normal>
			PORTB&=~(1<<PORTB5);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8f 7d       	andi	r24, 0xDF	; 223
 10e:	85 b9       	out	0x05, r24	; 5
			delay_500ms_normal();
 110:	0e 94 40 00 	call	0x80	; 0x80 <delay_500ms_normal>
		PORTB&=0;
		delay_500ms_normal();
		//delay_1s_ctc();
		PORTB|=(1<<PORTB3)|(1<<PORTB5);
		PORTB&=~(1<<PORTB2);
		for (i=0; i<5; i++)
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c5 30       	cpi	r28, 0x05	; 5
 118:	d1 05       	cpc	r29, r1
 11a:	94 f3       	brlt	.-28     	; 0x100 <main+0x5a>
			PORTB&=~(1<<PORTB5);
			delay_500ms_normal();
			//delay_5s_normal();
		}
		
		PORTB&=0;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	15 b8       	out	0x05, r1	; 5
		delay_500ms_normal();
 120:	0e 94 40 00 	call	0x80	; 0x80 <delay_500ms_normal>
		//delay_1s_ctc();
    }
 124:	c6 cf       	rjmp	.-116    	; 0xb2 <main+0xc>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
