
delay_both_normal_ctc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000707  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_normal>:
void delay_normal()
{
	int i;
	int count=61;
	
	for (i=0; i<count; i++)
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	0f c0       	rjmp	.+30     	; 0xa4 <delay_normal+0x24>
	{
		TCNT0=0;
  86:	16 bc       	out	0x26, r1	; 38
		TCCR0A=0;
  88:	14 bc       	out	0x24, r1	; 36
		TCCR0B|=(1<<CS00);
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	85 bd       	out	0x25, r24	; 37
		TCCR0B|=(1<<CS02); // prescalar 1024 used
  90:	85 b5       	in	r24, 0x25	; 37
  92:	84 60       	ori	r24, 0x04	; 4
  94:	85 bd       	out	0x25, r24	; 37
		TIFR0|=(1<<TOV0); // flag reset
  96:	85 b3       	in	r24, 0x15	; 21
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	85 bb       	out	0x15, r24	; 21
		while(!(TIFR0&(1<<TOV0)));
  9c:	a8 9b       	sbis	0x15, 0	; 21
  9e:	fe cf       	rjmp	.-4      	; 0x9c <delay_normal+0x1c>
void delay_normal()
{
	int i;
	int count=61;
	
	for (i=0; i<count; i++)
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	2d 33       	cpi	r18, 0x3D	; 61
  a6:	31 05       	cpc	r19, r1
  a8:	74 f3       	brlt	.-36     	; 0x86 <delay_normal+0x6>
		TCCR0B|=(1<<CS00);
		TCCR0B|=(1<<CS02); // prescalar 1024 used
		TIFR0|=(1<<TOV0); // flag reset
		while(!(TIFR0&(1<<TOV0)));
	}
}
  aa:	08 95       	ret

000000ac <delay_ctc>:
{
	int i=0;
	int count=61;
	
	
	for (i=0; i<count; i++)
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	13 c0       	rjmp	.+38     	; 0xd8 <delay_ctc+0x2c>
	{
		TCNT0=0;
  b2:	16 bc       	out	0x26, r1	; 38
		TCCR0A|=(1<<WGM01); // ctc used
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	84 bd       	out	0x24, r24	; 36
		TCCR0B|=(1<<CS00);
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 bd       	out	0x25, r24	; 37
		TCCR0B|=(1<<CS02); // prescalar 1024 used
  c0:	85 b5       	in	r24, 0x25	; 37
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 bd       	out	0x25, r24	; 37
		TIFR0|=(1<<OCF0A); // flag reset
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bb       	out	0x15, r24	; 21
		OCR0A=200;
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	87 bd       	out	0x27, r24	; 39
		while (!(TIFR0&(1<<OCF0A)));
  d0:	a9 9b       	sbis	0x15, 1	; 21
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <delay_ctc+0x24>
{
	int i=0;
	int count=61;
	
	
	for (i=0; i<count; i++)
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	2d 33       	cpi	r18, 0x3D	; 61
  da:	31 05       	cpc	r19, r1
  dc:	54 f3       	brlt	.-44     	; 0xb2 <delay_ctc+0x6>
		TIFR0|=(1<<OCF0A); // flag reset
		OCR0A=200;
		while (!(TIFR0&(1<<OCF0A)));
		
	}
}
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
	DDRB|=(1<<DDB5);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<DDB4);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	84 b9       	out	0x04, r24	; 4
	while (1)
	{
		PORTB|=(1<<PORTB5);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	85 b9       	out	0x05, r24	; 5
		delay_normal();
  f2:	0e 94 40 00 	call	0x80	; 0x80 <delay_normal>
		PORTB&=~(1<<PORTB5);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	85 b9       	out	0x05, r24	; 5
		delay_normal();
  fc:	0e 94 40 00 	call	0x80	; 0x80 <delay_normal>
		PORTB|=(1<<PORTB4);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	80 61       	ori	r24, 0x10	; 16
 104:	85 b9       	out	0x05, r24	; 5
		delay_ctc();
 106:	0e 94 56 00 	call	0xac	; 0xac <delay_ctc>
		PORTB&=~(1<<PORTB4);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	85 b9       	out	0x05, r24	; 5
		delay_ctc();
 110:	0e 94 56 00 	call	0xac	; 0xac <delay_ctc>
 114:	eb cf       	rjmp	.-42     	; 0xec <main+0xc>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
