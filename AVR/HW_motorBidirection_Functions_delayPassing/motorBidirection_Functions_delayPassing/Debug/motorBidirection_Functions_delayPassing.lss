
motorBidirection_Functions_delayPassing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  00000a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_ms>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void delay_ms(unsigned int ms) { 
	while (ms--) 
  80:	07 c0       	rjmp	.+14     	; 0x90 <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	8f e9       	ldi	r24, 0x9F	; 159
  84:	9f e0       	ldi	r25, 0x0F	; 15
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <delay_ms+0x6>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <delay_ms+0xc>
  8c:	00 00       	nop
  8e:	c9 01       	movw	r24, r18
  90:	9c 01       	movw	r18, r24
  92:	21 50       	subi	r18, 0x01	; 1
  94:	31 09       	sbc	r19, r1
  96:	89 2b       	or	r24, r25
  98:	a1 f7       	brne	.-24     	; 0x82 <delay_ms+0x2>
	{
		_delay_ms(1); // always constant = 1 
	}
}
  9a:	08 95       	ret

0000009c <CW>:

void CW(unsigned int delay){
	PORTB|=(1<<PORTB5);
  9c:	25 b1       	in	r18, 0x05	; 5
  9e:	20 62       	ori	r18, 0x20	; 32
  a0:	25 b9       	out	0x05, r18	; 5
	PORTB&=~(1<<PORTB4);
  a2:	25 b1       	in	r18, 0x05	; 5
  a4:	2f 7e       	andi	r18, 0xEF	; 239
  a6:	25 b9       	out	0x05, r18	; 5
	delay_ms(delay);
  a8:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
  ac:	08 95       	ret

000000ae <STP>:
}

void STP(unsigned int delay){
	PORTB&=~(1<<PORTB5);
  ae:	25 b1       	in	r18, 0x05	; 5
  b0:	2f 7d       	andi	r18, 0xDF	; 223
  b2:	25 b9       	out	0x05, r18	; 5
	PORTB&=~(1<<PORTB4);
  b4:	25 b1       	in	r18, 0x05	; 5
  b6:	2f 7e       	andi	r18, 0xEF	; 239
  b8:	25 b9       	out	0x05, r18	; 5
	delay_ms(delay);
  ba:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
  be:	08 95       	ret

000000c0 <CCW>:
}

void CCW(unsigned int delay){
	PORTB&=~(1<<PORTB5);
  c0:	25 b1       	in	r18, 0x05	; 5
  c2:	2f 7d       	andi	r18, 0xDF	; 223
  c4:	25 b9       	out	0x05, r18	; 5
	PORTB|=(1<<PORTB4);
  c6:	25 b1       	in	r18, 0x05	; 5
  c8:	20 61       	ori	r18, 0x10	; 16
  ca:	25 b9       	out	0x05, r18	; 5
	delay_ms(delay);
  cc:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
  d0:	08 95       	ret

000000d2 <main>:
}

int main(void)
{
	DDRB|=(1<<5);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<4);
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	84 b9       	out	0x04, r24	; 4
	while (1)
	{
		CW(5000);
  de:	88 e8       	ldi	r24, 0x88	; 136
  e0:	93 e1       	ldi	r25, 0x13	; 19
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <CW>
		STP(1000);
  e6:	88 ee       	ldi	r24, 0xE8	; 232
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	0e 94 57 00 	call	0xae	; 0xae <STP>
		CCW(5000);
  ee:	88 e8       	ldi	r24, 0x88	; 136
  f0:	93 e1       	ldi	r25, 0x13	; 19
  f2:	0e 94 60 00 	call	0xc0	; 0xc0 <CCW>
		STP(1000);
  f6:	88 ee       	ldi	r24, 0xE8	; 232
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	0e 94 57 00 	call	0xae	; 0xae <STP>
  fe:	ef cf       	rjmp	.-34     	; 0xde <main+0xc>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
