
pwm_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b7  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	int state=0;
	DDRD&=~(1<<DDD0);// pin d0 as input
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8e 7f       	andi	r24, 0xFE	; 254
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PORTD0); // internal pull up
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	8b b9       	out	0x0b, r24	; 11
	
    DDRC|=(1<<DDC0)|(1<<DDC1); // set pc0 and pc1 as output
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<PORTC1)|(0<<PORTC0); // set pc1 as logic 1 and pc0 as logic 0
  92:	88 b1       	in	r24, 0x08	; 8
  94:	82 60       	ori	r24, 0x02	; 2
  96:	88 b9       	out	0x08, r24	; 8
	DDRD|=(1<<DDD6); // make pwm pin pd6 as output
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	8a b9       	out	0x0a, r24	; 10
	TCCR0A|=(1<<WGM00)|(1<<WGM01); // fast pwm
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00)|(1<<CS02); // pre scalar 1024
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	85 60       	ori	r24, 0x05	; 5
  a8:	85 bd       	out	0x25, r24	; 37
	TCCR0A|=(1<<COM0A1); // non inverting selected 
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	84 bd       	out	0x24, r24	; 36
	OCR0A=0;
  b0:	17 bc       	out	0x27, r1	; 39



int main(void)
{
	int state=0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
	TCCR0B|=(1<<CS00)|(1<<CS02); // pre scalar 1024
	TCCR0A|=(1<<COM0A1); // non inverting selected 
	OCR0A=0;
    while (1) 
    {
		if (!(PIND&(1<<PIND0)))
  b6:	48 99       	sbic	0x09, 0	; 9
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	30 e7       	ldi	r19, 0x70	; 112
  be:	42 e0       	ldi	r20, 0x02	; 2
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
		{
			_delay_ms(50);
			while(!(PIND & (1<<PIND0))); // wait for release
  cc:	48 9b       	sbis	0x09, 0	; 9
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x4c>
			
			state++;
  d0:	01 96       	adiw	r24, 0x01	; 1
			if(state > 3) state = 0;   // cycle back
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	91 05       	cpc	r25, r1
  d6:	14 f0       	brlt	.+4      	; 0xdc <main+0x5c>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
	
		switch (state)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 05       	cpc	r25, r1
  e0:	69 f0       	breq	.+26     	; 0xfc <main+0x7c>
  e2:	1c f4       	brge	.+6      	; 0xea <main+0x6a>
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	41 f0       	breq	.+16     	; 0xf8 <main+0x78>
  e8:	e6 cf       	rjmp	.-52     	; 0xb6 <main+0x36>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	91 05       	cpc	r25, r1
  ee:	49 f0       	breq	.+18     	; 0x102 <main+0x82>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	91 05       	cpc	r25, r1
  f4:	49 f0       	breq	.+18     	; 0x108 <main+0x88>
  f6:	df cf       	rjmp	.-66     	; 0xb6 <main+0x36>
		{
			case 0: OCR0A=0;   break;
  f8:	17 bc       	out	0x27, r1	; 39
  fa:	dd cf       	rjmp	.-70     	; 0xb6 <main+0x36>
			case 1: OCR0A=85;  break;
  fc:	25 e5       	ldi	r18, 0x55	; 85
  fe:	27 bd       	out	0x27, r18	; 39
 100:	da cf       	rjmp	.-76     	; 0xb6 <main+0x36>
			case 2: OCR0A=170; break; 
 102:	2a ea       	ldi	r18, 0xAA	; 170
 104:	27 bd       	out	0x27, r18	; 39
 106:	d7 cf       	rjmp	.-82     	; 0xb6 <main+0x36>
			case 3: OCR0A=255; break;
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	27 bd       	out	0x27, r18	; 39
 10c:	d4 cf       	rjmp	.-88     	; 0xb6 <main+0x36>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
