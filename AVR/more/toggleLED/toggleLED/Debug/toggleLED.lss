
toggleLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
    DDRD = 0b00000000;
  80:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00000001;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b00100000;
  86:	80 e2       	ldi	r24, 0x20	; 32
  88:	87 b9       	out	0x07, r24	; 7
	
	// unsigned, 8-bit integer
	uint8_t ledState = 0;
	uint8_t prevButtonState = 1;
  8a:	41 e0       	ldi	r20, 0x01	; 1
    DDRD = 0b00000000;
	PORTD = 0b00000001;
	DDRC = 0b00100000;
	
	// unsigned, 8-bit integer
	uint8_t ledState = 0;
  8c:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t prevButtonState = 1;
	
	
    while (1) 
    {
		uint8_t currentButtonState = (PIND & 0b00000001)?1:0;
  8e:	99 b1       	in	r25, 0x09	; 9
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	29 2f       	mov	r18, r25
  94:	21 70       	andi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	90 ff       	sbrs	r25, 0
  9a:	80 e0       	ldi	r24, 0x00	; 0
		if (prevButtonState == 1 && currentButtonState == 0)
  9c:	41 30       	cpi	r20, 0x01	; 1
  9e:	31 f4       	brne	.+12     	; 0xac <main+0x2c>
  a0:	23 2b       	or	r18, r19
  a2:	21 f4       	brne	.+8      	; 0xac <main+0x2c>
		{
			ledState = !ledState;
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	51 11       	cpse	r21, r1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	59 2f       	mov	r21, r25
		}
		if (ledState)
  ac:	55 23       	and	r21, r21
  ae:	19 f0       	breq	.+6      	; 0xb6 <main+0x36>
			PORTC = 0b00100000;
  b0:	90 e2       	ldi	r25, 0x20	; 32
  b2:	98 b9       	out	0x08, r25	; 8
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x38>
		else
			PORTC = 0b00000000;
  b6:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	4f ef       	ldi	r20, 0xFF	; 255
  ba:	60 e7       	ldi	r22, 0x70	; 112
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	41 50       	subi	r20, 0x01	; 1
  c0:	60 40       	sbci	r22, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
	
	prevButtonState = currentButtonState;
  ca:	48 2f       	mov	r20, r24
  cc:	e0 cf       	rjmp	.-64     	; 0x8e <main+0xe>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
