
pwm_concept_dso.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000743  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	int i;
	DDRD|=(1<<DDD6); // PWM OUTPUT PIN OF ATMEGA328 MADE OUTPUT
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD5);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	8a b9       	out	0x0a, r24	; 10
	TCCR0A|=(1<<WGM01)|(1<<WGM00); // fast pwm selected
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	84 bd       	out	0x24, r24	; 36
	TCCR0A|=(1<<COM0B1);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	80 62       	ori	r24, 0x20	; 32
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0A|=(1<<COM0A1); // non inverting selected
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS02)|(1<<CS00); // pre scalar 124 selected
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37
	OCR0A=124;
  a4:	8c e7       	ldi	r24, 0x7C	; 124
  a6:	87 bd       	out	0x27, r24	; 39
	
	while (1)
	{
		for (i=0; i<255; i++)
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 c0       	rjmp	.+16     	; 0xbe <main+0x3e>
		{
			OCR0B=i;
  ae:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	ef e3       	ldi	r30, 0x3F	; 63
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x34>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
	TCCR0B|=(1<<CS02)|(1<<CS00); // pre scalar 124 selected
	OCR0A=124;
	
	while (1)
	{
		for (i=0; i<255; i++)
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	8f 3f       	cpi	r24, 0xFF	; 255
  c0:	91 05       	cpc	r25, r1
  c2:	ac f3       	brlt	.-22     	; 0xae <main+0x2e>
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	08 c0       	rjmp	.+16     	; 0xda <main+0x5a>
			_delay_ms(10);
		}
		
		for (i=255; i>0; i--)
		{
			OCR0B=i;
  ca:	88 bd       	out	0x28, r24	; 40
  cc:	ef e3       	ldi	r30, 0x3F	; 63
  ce:	fc e9       	ldi	r31, 0x9C	; 156
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x50>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
		{
			OCR0B=i;
			_delay_ms(10);
		}
		
		for (i=255; i>0; i--)
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	18 16       	cp	r1, r24
  dc:	19 06       	cpc	r1, r25
  de:	ac f3       	brlt	.-22     	; 0xca <main+0x4a>
  e0:	e3 cf       	rjmp	.-58     	; 0xa8 <main+0x28>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
