
buttonHold.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077e  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	int counter=0;
	DDRD&=~(1<<DDD2);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PORTD2);
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11
	DDRC|=(1<<DDC2)|(1<<DDC0)|(1<<DDC1);
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	87 60       	ori	r24, 0x07	; 7
  90:	87 b9       	out	0x07, r24	; 7
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
	PORTD|=(1<<PORTD2);
	DDRC|=(1<<DDC2)|(1<<DDC0)|(1<<DDC1);
	while (1)
	{
		
		if (!(PIND&(1<<PIND2))) // checking switch pressed or not
  96:	4a 99       	sbic	0x09, 2	; 9
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x16>
  9a:	07 c0       	rjmp	.+14     	; 0xaa <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	ef e3       	ldi	r30, 0x3F	; 63
  9e:	fc e9       	ldi	r31, 0x9C	; 156
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
		{
			while (!(PIND&(1<<PIND2)))
			{
				_delay_ms(10); // 10 ms delay in every loop
				counter+=10; // 10 counter update in every 10 ms, so counter=1000 in 1 sec 
  a8:	0a 96       	adiw	r24, 0x0a	; 10
	while (1)
	{
		
		if (!(PIND&(1<<PIND2))) // checking switch pressed or not
		{
			while (!(PIND&(1<<PIND2)))
  aa:	4a 9b       	sbis	0x09, 2	; 9
  ac:	f7 cf       	rjmp	.-18     	; 0x9c <main+0x1c>
				_delay_ms(10); // 10 ms delay in every loop
				counter+=10; // 10 counter update in every 10 ms, so counter=1000 in 1 sec 
				// here to get 1000 counter we need to hold the push button for 1 second 
			}
			
			if (counter<1000) // if short press
  ae:	88 3e       	cpi	r24, 0xE8	; 232
  b0:	f3 e0       	ldi	r31, 0x03	; 3
  b2:	9f 07       	cpc	r25, r31
  b4:	ac f4       	brge	.+42     	; 0xe0 <main+0x60>
  b6:	8f e3       	ldi	r24, 0x3F	; 63
  b8:	9c e9       	ldi	r25, 0x9C	; 156
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
			{
				_delay_ms(10);
				PORTC^=(1<<PORTC2); // led toggle
  c2:	98 b1       	in	r25, 0x08	; 8
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	89 27       	eor	r24, r25
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	e0 e7       	ldi	r30, 0x70	; 112
  ce:	f2 e0       	ldi	r31, 0x02	; 2
  d0:	91 50       	subi	r25, 0x01	; 1
  d2:	e0 40       	sbci	r30, 0x00	; 0
  d4:	f0 40       	sbci	r31, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x50>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5a>
  da:	00 00       	nop
				counter=0;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(50);
			}
			
			if (counter>=1000) // if long press 
  e0:	88 3e       	cpi	r24, 0xE8	; 232
  e2:	23 e0       	ldi	r18, 0x03	; 3
  e4:	92 07       	cpc	r25, r18
  e6:	bc f2       	brlt	.-82     	; 0x96 <main+0x16>
			{	
				PORTC^=(1<<PORTC1); // motor rotation state toggles
  e8:	98 b1       	in	r25, 0x08	; 8
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	89 27       	eor	r24, r25
  ee:	88 b9       	out	0x08, r24	; 8
				PORTC&=~(1<<PORTC0);
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	cd cf       	rjmp	.-102    	; 0x92 <main+0x12>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
