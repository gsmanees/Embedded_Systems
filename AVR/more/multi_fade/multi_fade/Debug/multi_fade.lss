
multi_fade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000883  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000737  00000000  00000000  00000bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000133  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 13 01 	call	0x226	; 0x226 <main>
  88:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

volatile uint8_t duty[10]={0}; // duty cycle from 0 to 255
volatile uint8_t pwm_counter=0; // counter from 0 to 255
int port=0;
ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	pwm_counter++;
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	    if (pwm_counter<duty[0]) PORTC |= (1 << PORTC1); else PORTC &= ~(1 << PORTC1);
  a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <duty>
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	89 17       	cp	r24, r25
  b2:	20 f4       	brcc	.+8      	; 0xbc <__vector_14+0x2c>
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <__vector_14+0x32>
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	88 b9       	out	0x08, r24	; 8
	    if (pwm_counter<duty[1]) PORTC |= (1 << PORTC2); else PORTC &= ~(1 << PORTC2);
  c2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <duty+0x1>
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	89 17       	cp	r24, r25
  cc:	20 f4       	brcc	.+8      	; 0xd6 <__vector_14+0x46>
  ce:	88 b1       	in	r24, 0x08	; 8
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	03 c0       	rjmp	.+6      	; 0xdc <__vector_14+0x4c>
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	88 b9       	out	0x08, r24	; 8
	    if (pwm_counter<duty[2]) PORTC |= (1 << PORTC3); else PORTC &= ~(1 << PORTC3);
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <duty+0x2>
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	89 17       	cp	r24, r25
  e6:	20 f4       	brcc	.+8      	; 0xf0 <__vector_14+0x60>
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <__vector_14+0x66>
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	88 b9       	out	0x08, r24	; 8
	    if (pwm_counter<duty[3]) PORTC |= (1 << PORTC4); else PORTC &= ~(1 << PORTC4);
  f6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <duty+0x3>
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	89 17       	cp	r24, r25
 100:	20 f4       	brcc	.+8      	; 0x10a <__vector_14+0x7a>
 102:	88 b1       	in	r24, 0x08	; 8
 104:	80 61       	ori	r24, 0x10	; 16
 106:	88 b9       	out	0x08, r24	; 8
 108:	03 c0       	rjmp	.+6      	; 0x110 <__vector_14+0x80>
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	88 b9       	out	0x08, r24	; 8
	    if (pwm_counter<duty[4]) PORTC |= (1 << PORTC5); else PORTC &= ~(1 << PORTC5);
 110:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <duty+0x4>
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	89 17       	cp	r24, r25
 11a:	20 f4       	brcc	.+8      	; 0x124 <__vector_14+0x94>
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	88 b9       	out	0x08, r24	; 8
 122:	03 c0       	rjmp	.+6      	; 0x12a <__vector_14+0x9a>
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	88 b9       	out	0x08, r24	; 8
	    if (pwm_counter<duty[5]) PORTD |= (1 << PORTD0); else PORTD &= ~(1 << PORTD0);
 12a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <duty+0x5>
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	89 17       	cp	r24, r25
 134:	20 f4       	brcc	.+8      	; 0x13e <__vector_14+0xae>
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	03 c0       	rjmp	.+6      	; 0x144 <__vector_14+0xb4>
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	8b b9       	out	0x0b, r24	; 11
	    if (pwm_counter<duty[6]) PORTD |= (1 << PORTD1); else PORTD &= ~(1 << PORTD1);
 144:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <duty+0x6>
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	89 17       	cp	r24, r25
 14e:	20 f4       	brcc	.+8      	; 0x158 <__vector_14+0xc8>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	82 60       	ori	r24, 0x02	; 2
 154:	8b b9       	out	0x0b, r24	; 11
 156:	03 c0       	rjmp	.+6      	; 0x15e <__vector_14+0xce>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	8b b9       	out	0x0b, r24	; 11
	    if (pwm_counter<duty[7]) PORTD |= (1 << PORTD2); else PORTD &= ~(1 << PORTD2);
 15e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <duty+0x7>
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	89 17       	cp	r24, r25
 168:	20 f4       	brcc	.+8      	; 0x172 <__vector_14+0xe2>
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	03 c0       	rjmp	.+6      	; 0x178 <__vector_14+0xe8>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	8b b9       	out	0x0b, r24	; 11
	    if (pwm_counter<duty[8]) PORTD |= (1 << PORTD3); else PORTD &= ~(1 << PORTD3);
 178:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <duty+0x8>
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	89 17       	cp	r24, r25
 182:	20 f4       	brcc	.+8      	; 0x18c <__vector_14+0xfc>
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	88 60       	ori	r24, 0x08	; 8
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	03 c0       	rjmp	.+6      	; 0x192 <__vector_14+0x102>
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	8b b9       	out	0x0b, r24	; 11
	  
	
}
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <timer0_init>:


void timer0_init(void)
{
	TCCR0A = (1 << WGM01);      // CTC mode (Clear Timer on Compare)
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01);       // prescaler 8
 1a4:	85 bd       	out	0x25, r24	; 37
	OCR0A  = 62;
 1a6:	9e e3       	ldi	r25, 0x3E	; 62
 1a8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A);     // enable compare match A interrupt
 1aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();                      // enable global interrupts
 1ae:	78 94       	sei
 1b0:	08 95       	ret

000001b2 <led_init>:
}


void led_init()
{
	DDRC|=(1<<DDC1)|(1<<DDC2)|(1<<DDC3)|(1<<DDC4)|(1<<DDC5);
 1b2:	87 b1       	in	r24, 0x07	; 7
 1b4:	8e 63       	ori	r24, 0x3E	; 62
 1b6:	87 b9       	out	0x07, r24	; 7
	DDRD|=(1<<DDD0)|(1<<DDD1)|(1<<DDD2)|(1<<DDD3)|(1<<DDD4);
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	8f 61       	ori	r24, 0x1F	; 31
 1bc:	8a b9       	out	0x0a, r24	; 10
	DDRB&=~(1<<DDB0);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	84 b9       	out	0x04, r24	; 4
	PORTB|=(1<<PORTB0); // pin b6 is input active low
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	08 95       	ret

000001cc <fade>:
}

void fade()
{
	for (int k=0; k<10; k++)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	26 c0       	rjmp	.+76     	; 0x21e <fade+0x52>
	{
		for (uint8_t i=0; i<255; i++)
		{
			duty[k]=i;
 1d2:	f9 01       	movw	r30, r18
 1d4:	ef 5f       	subi	r30, 0xFF	; 255
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	ef e1       	ldi	r30, 0x1F	; 31
 1dc:	fe e4       	ldi	r31, 0x4E	; 78
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <fade+0x12>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <fade+0x18>
 1e4:	00 00       	nop

void fade()
{
	for (int k=0; k<10; k++)
	{
		for (uint8_t i=0; i<255; i++)
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <fade+0x20>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	8f 3f       	cpi	r24, 0xFF	; 255
 1ee:	89 f7       	brne	.-30     	; 0x1d2 <fade+0x6>
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <fade+0x40>
			_delay_ms(5);
		}
		
		for (int i=255; i>0; i--)
		{
			duty[k]=i;
 1f6:	f9 01       	movw	r30, r18
 1f8:	ef 5f       	subi	r30, 0xFF	; 255
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	80 83       	st	Z, r24
 1fe:	ef e1       	ldi	r30, 0x1F	; 31
 200:	fe e4       	ldi	r31, 0x4E	; 78
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <fade+0x36>
 206:	00 c0       	rjmp	.+0      	; 0x208 <fade+0x3c>
 208:	00 00       	nop
		{
			duty[k]=i;
			_delay_ms(5);
		}
		
		for (int i=255; i>0; i--)
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	18 16       	cp	r1, r24
 20e:	19 06       	cpc	r1, r25
 210:	94 f3       	brlt	.-28     	; 0x1f6 <fade+0x2a>
		{
			duty[k]=i;
			_delay_ms(5);
		}
		duty[k]=0;
 212:	f9 01       	movw	r30, r18
 214:	ef 5f       	subi	r30, 0xFF	; 255
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	10 82       	st	Z, r1
	PORTB|=(1<<PORTB0); // pin b6 is input active low
}

void fade()
{
	for (int k=0; k<10; k++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	2a 30       	cpi	r18, 0x0A	; 10
 220:	31 05       	cpc	r19, r1
 222:	1c f3       	brlt	.-58     	; 0x1ea <fade+0x1e>
		}
		duty[k]=0;
		
	}
	
}
 224:	08 95       	ret

00000226 <main>:

int main(void)
{
	led_init();
 226:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <led_init>
	timer0_init();
 22a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <timer0_init>
	while (1)
	{
		if (!(PINB&(1<<PINB0)))
 22e:	18 99       	sbic	0x03, 0	; 3
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x8>
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	80 e7       	ldi	r24, 0x70	; 112
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x12>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x1c>
 242:	00 00       	nop
		{
			_delay_ms(50);
			while(!(PINB&(1<<PINB0)));
 244:	18 9b       	sbis	0x03, 0	; 3
 246:	fe cf       	rjmp	.-4      	; 0x244 <main+0x1e>
			fade();
 248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <fade>
 24c:	f0 cf       	rjmp	.-32     	; 0x22e <main+0x8>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
