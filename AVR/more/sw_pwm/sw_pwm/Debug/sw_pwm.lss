
sw_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007eb  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  00001129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f8  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 91 00 	call	0x122	; 0x122 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
volatile uint8_t duty=0; // duty cycle from 0 to 255
volatile uint8_t pwm_counter=0; // counter from 0 to 255


ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	pwm_counter++;
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (pwm_counter<duty)
  a8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <duty>
  b0:	98 17       	cp	r25, r24
  b2:	20 f4       	brcc	.+8      	; 0xbc <__vector_14+0x2c>
		PORTB|=(1<<PORTB5);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <__vector_14+0x32>
	else
		PORTB&=~(1<<PORTB5);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	85 b9       	out	0x05, r24	; 5
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <timer0_init>:

void timer0_init(void)
{
	DDRB |= (1<<PORTB5);         // set PB5 as output
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	84 b9       	out	0x04, r24	; 4

	// --- Timer0 configuration ---
	TCCR0A = (1 << WGM01);      // CTC mode (Clear Timer on Compare)
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01);       // prescaler 8
  da:	85 bd       	out	0x25, r24	; 37
	OCR0A  = 62;               
  dc:	9e e3       	ldi	r25, 0x3E	; 62
  de:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A);     // enable compare match A interrupt
  e0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();                      // enable global interrupts
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <fade>:
}

void fade()
{
	for (uint8_t i=0; i<255; i++)
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	09 c0       	rjmp	.+18     	; 0xfe <fade+0x16>
	{
		duty=i;
  ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	ef e1       	ldi	r30, 0x1F	; 31
  f2:	fe e4       	ldi	r31, 0x4E	; 78
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <fade+0xc>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <fade+0x12>
  fa:	00 00       	nop
	sei();                      // enable global interrupts
}

void fade()
{
	for (uint8_t i=0; i<255; i++)
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	a9 f7       	brne	.-22     	; 0xec <fade+0x4>
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	09 c0       	rjmp	.+18     	; 0x11a <fade+0x32>
		_delay_ms(5);
	}
	
	for (int i=255; i>0; i--)
	{
		duty=i;
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <duty>
 10c:	ef e1       	ldi	r30, 0x1F	; 31
 10e:	fe e4       	ldi	r31, 0x4E	; 78
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <fade+0x28>
 114:	00 c0       	rjmp	.+0      	; 0x116 <fade+0x2e>
 116:	00 00       	nop
	{
		duty=i;
		_delay_ms(5);
	}
	
	for (int i=255; i>0; i--)
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	18 16       	cp	r1, r24
 11c:	19 06       	cpc	r1, r25
 11e:	a4 f3       	brlt	.-24     	; 0x108 <fade+0x20>
	{
		duty=i;
		_delay_ms(5);
	}
}
 120:	08 95       	ret

00000122 <main>:

int main()
{
	timer0_init();
 122:	0e 94 68 00 	call	0xd0	; 0xd0 <timer0_init>
	
	while (1)
	{
		fade();
 126:	0e 94 74 00 	call	0xe8	; 0xe8 <fade>
 12a:	fd cf       	rjmp	.-6      	; 0x126 <main+0x4>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
