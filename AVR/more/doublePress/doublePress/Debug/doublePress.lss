
doublePress.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fe  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e5  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000309  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b4  00000000  00000000  0000183f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <while_check>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <while_check+0x6>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <while_check+0x10>
  a0:	00 00       	nop


void while_check()
{
	_delay_ms(50); // debounce
	while (!(PIND&(1<<PIND2))); // hold program until button press process complete
  a2:	4a 9b       	sbis	0x09, 2	; 9
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <while_check+0x12>
}
  a6:	08 95       	ret

000000a8 <doublePress_check>:


void doublePress_check()
{
	// checking if there is a second press within 500ms
	for (int i=0; i<50; i++)
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	18 c0       	rjmp	.+48     	; 0xde <doublePress_check+0x36>
  ae:	ef e3       	ldi	r30, 0x3F	; 63
  b0:	fc e9       	ldi	r31, 0x9C	; 156
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <doublePress_check+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <doublePress_check+0x10>
  b8:	00 00       	nop
	{
		_delay_ms(10); // it delays the program for 500ms, and in every loop checks for a second press
		if (!(PIND&(1<<PIND2)))
  ba:	4a 99       	sbic	0x09, 2	; 9
  bc:	0f c0       	rjmp	.+30     	; 0xdc <doublePress_check+0x34>
  be:	ff ef       	ldi	r31, 0xFF	; 255
  c0:	20 e7       	ldi	r18, 0x70	; 112
  c2:	32 e0       	ldi	r19, 0x02	; 2
  c4:	f1 50       	subi	r31, 0x01	; 1
  c6:	20 40       	sbci	r18, 0x00	; 0
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <doublePress_check+0x1c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <doublePress_check+0x26>
  ce:	00 00       	nop
		{
			_delay_ms(50); // debouce
			doublePress=1;// if second press occured within 500ms, the doublepress counter will become 1
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>


void doublePress_check()
{
	// checking if there is a second press within 500ms
	for (int i=0; i<50; i++)
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	82 33       	cpi	r24, 0x32	; 50
  e0:	91 05       	cpc	r25, r1
  e2:	2c f3       	brlt	.-54     	; 0xae <doublePress_check+0x6>
		{
			_delay_ms(50); // debouce
			doublePress=1;// if second press occured within 500ms, the doublepress counter will become 1
		}
	}
}
  e4:	08 95       	ret

000000e6 <toggle_LED>:


void toggle_LED()
{
	PORTC^=(1<<PORTC2);
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	89 27       	eor	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
	doublePress=0; //reset counter
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	08 95       	ret

000000f8 <main>:
}


int main(void)
{
	DDRD&= ~(1<<DDD2);
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PORTD2);
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	84 60       	ori	r24, 0x04	; 4
 102:	8b b9       	out	0x0b, r24	; 11
	DDRC|=(1<<PORTC2);
 104:	87 b1       	in	r24, 0x07	; 7
 106:	84 60       	ori	r24, 0x04	; 4
 108:	87 b9       	out	0x07, r24	; 7
	doublePress=0;
 10a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	while (1)
	{
		if (!(PIND&(1<<PIND2)))
 112:	4a 99       	sbic	0x09, 2	; 9
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x1a>
		{	
			while_check();
 116:	0e 94 48 00 	call	0x90	; 0x90 <while_check>
			doublePress_check();
 11a:	0e 94 54 00 	call	0xa8	; 0xa8 <doublePress_check>
			if (doublePress)
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	89 2b       	or	r24, r25
 128:	a1 f3       	breq	.-24     	; 0x112 <main+0x1a>
			{
				toggle_LED();
 12a:	0e 94 73 00 	call	0xe6	; 0xe6 <toggle_LED>
 12e:	f1 cf       	rjmp	.-30     	; 0x112 <main+0x1a>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
