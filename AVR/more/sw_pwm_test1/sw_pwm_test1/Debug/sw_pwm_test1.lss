
sw_pwm_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fb  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000112  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

volatile uint16_t duty=0;
volatile uint8_t counter=0;

ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	counter++;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (counter<duty)
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <duty>
  b6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <duty+0x1>
  ba:	82 17       	cp	r24, r18
  bc:	93 07       	cpc	r25, r19
  be:	20 f4       	brcc	.+8      	; 0xc8 <__vector_14+0x38>
	PORTB|=(1<<PORTB5);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	03 c0       	rjmp	.+6      	; 0xce <__vector_14+0x3e>
	else
	PORTB&=~(1<<PORTB5);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	85 b9       	out	0x05, r24	; 5
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <timer0_init>:

void timer0_init()
{
	DDRB|=(1<<DDB5);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A=(1<<WGM01); // ctc
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	84 bd       	out	0x24, r24	; 36
	TCCR0B=(1<<CS01); // pre scalar 8
  ea:	85 bd       	out	0x25, r24	; 37
	OCR0A=62;
  ec:	9e e3       	ldi	r25, 0x3E	; 62
  ee:	97 bd       	out	0x27, r25	; 39
	TIMSK0=(1<<OCIE0A);
  f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <fade>:


void fade()
{
	// fade in
	for (uint8_t i=0; i<255; i++)
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0d c0       	rjmp	.+26     	; 0x116 <fade+0x1e>
	{
		duty=i;
  fc:	28 2f       	mov	r18, r24
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <duty+0x1>
 104:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	ef e1       	ldi	r30, 0x1F	; 31
 10a:	fe e4       	ldi	r31, 0x4E	; 78
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <fade+0x14>
 110:	00 c0       	rjmp	.+0      	; 0x112 <fade+0x1a>
 112:	00 00       	nop


void fade()
{
	// fade in
	for (uint8_t i=0; i<255; i++)
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	8f 3f       	cpi	r24, 0xFF	; 255
 118:	89 f7       	brne	.-30     	; 0xfc <fade+0x4>
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0b c0       	rjmp	.+22     	; 0x136 <fade+0x3e>
	}
	
	// fade out
	for (int i=255; i>0; i--)
	{
		duty=i;
 120:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <duty+0x1>
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <duty>
 128:	ef e1       	ldi	r30, 0x1F	; 31
 12a:	fe e4       	ldi	r31, 0x4E	; 78
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <fade+0x34>
 130:	00 c0       	rjmp	.+0      	; 0x132 <fade+0x3a>
 132:	00 00       	nop
		duty=i;
		_delay_ms(5);
	}
	
	// fade out
	for (int i=255; i>0; i--)
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	18 16       	cp	r1, r24
 138:	19 06       	cpc	r1, r25
 13a:	94 f3       	brlt	.-28     	; 0x120 <fade+0x28>
	{
		duty=i;
		_delay_ms(5);
	}
	
}
 13c:	08 95       	ret

0000013e <main>:


int main(void)
{
    timer0_init();
 13e:	0e 94 70 00 	call	0xe0	; 0xe0 <timer0_init>
    while (1) 
    {
		fade();
 142:	0e 94 7c 00 	call	0xf8	; 0xf8 <fade>
 146:	fd cf       	rjmp	.-6      	; 0x142 <main+0x4>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
