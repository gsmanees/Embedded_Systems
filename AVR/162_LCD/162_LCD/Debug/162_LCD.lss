
162_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000006aa  0000071e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e89  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000873  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000632  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000474  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066f  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000319b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 88 01 	call	0x310	; 0x310 <main>
  8e:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable_pulse>:
}

// this function allows us to return the cursor to home
void lcd_home(void)
{
	lcd_cmd(0x02);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_enable_pulse+0x8>
  a2:	00 00       	nop
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_enable_pulse+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_enable_pulse+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <lcd_send_nibble>:
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	93 7c       	andi	r25, 0xC3	; 195
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	83 ff       	sbrs	r24, 3
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_send_nibble+0x10>
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	94 60       	ori	r25, 0x04	; 4
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	82 ff       	sbrs	r24, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_send_nibble+0x1a>
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	98 60       	ori	r25, 0x08	; 8
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	81 ff       	sbrs	r24, 1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <lcd_send_nibble+0x24>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	90 61       	ori	r25, 0x10	; 16
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	80 ff       	sbrs	r24, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_send_nibble+0x2e>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable_pulse>
  ea:	08 95       	ret

000000ec <lcd_send_byte>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	21 f4       	brne	.+8      	; 0xfc <lcd_send_byte+0x10>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_send_byte+0x16>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
 102:	8c 2f       	mov	r24, r28
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 10c:	8c 2f       	mov	r24, r28
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_cmd>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 122:	c1 50       	subi	r28, 0x01	; 1
 124:	c2 30       	cpi	r28, 0x02	; 2
 126:	30 f4       	brcc	.+12     	; 0x134 <lcd_cmd+0x1c>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_cmd+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_cmd+0x1a>
 132:	00 00       	nop
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_data>:
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_send_byte>
 13e:	08 95       	ret

00000140 <lcd_set_cursor>:
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <lcd_set_cursor+0x8>
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_set_cursor+0xa>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	86 2f       	mov	r24, r22
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 0f       	add	r24, r25
 150:	80 68       	ori	r24, 0x80	; 128
 152:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 156:	08 95       	ret

00000158 <lcd_print>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_print+0xe>
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <lcd_print+0x8>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_clear>:
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 178:	08 95       	ret

0000017a <lcd_init>:
// this function initialises the lcd. (initialisation sequence from datasheet)

void lcd_init(void)
{
	// Make control and data pins outputs
	LCD_RS_DDR |= (1<<LCD_RS_PIN);
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	84 b9       	out	0x04, r24	; 4
	LCD_EN_DDR |= (1<<LCD_EN_PIN);
 180:	84 b1       	in	r24, 0x04	; 4
 182:	88 60       	ori	r24, 0x08	; 8
 184:	84 b9       	out	0x04, r24	; 4
	LCD_D_DDR  |= (1<<LCD_D7_PIN)|(1<<LCD_D6_PIN)|(1<<LCD_D5_PIN)|(1<<LCD_D4_PIN);
 186:	8a b1       	in	r24, 0x0a	; 10
 188:	8c 63       	ori	r24, 0x3C	; 60
 18a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 ef       	ldi	r24, 0xF9	; 249
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <lcd_init+0x18>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x22>
 19c:	00 00       	nop

	_delay_ms(20);               // power-up wait
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN); 				// RS=0
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	85 b9       	out	0x05, r24	; 5

	//  8-bit wake-up sequence (sent as high nibbles). why nibbles?
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);   		 // make EN =0 .
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	85 b9       	out	0x05, r24	; 5
	lcd_send_nibble(0x03);
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1b0:	8f e1       	ldi	r24, 0x1F	; 31
 1b2:	9e e4       	ldi	r25, 0x4E	; 78
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x3a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init+0x40>
 1ba:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	87 e5       	ldi	r24, 0x57	; 87
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x4c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x52>
 1cc:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1d4:	87 e5       	ldi	r24, 0x57	; 87
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x5e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0x64>
 1de:	00 00       	nop
	_delay_us(150);

	//Switch to 4-bit
	lcd_send_nibble(0x02);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_send_nibble>
 1e6:	87 e5       	ldi	r24, 0x57	; 87
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x70>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x76>
 1f0:	00 00       	nop
	_delay_us(150);

	// note that from here onwards its cmd !

	//Function set: 4-bit, 2 lines, 5x8 font
	lcd_cmd(0x28);
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Display off

	lcd_cmd(0x08);
 1f8:	88 e0       	ldi	r24, 0x08	; 8
 1fa:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
	//Clear
	lcd_cmd(0x01);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>

	//Entry mode: increment, no shift
	lcd_cmd(0x06);
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>


	// Display on, cursor off, blink off
	lcd_cmd(0x0C);
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_cmd>
 210:	08 95       	ret

00000212 <lcd_print_uint16>:
}

// function to print integers. (we use recursion)
void lcd_print_uint16(uint16_t v)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
	if (v >= 10)
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	91 05       	cpc	r25, r1
 21c:	68 f0       	brcs	.+26     	; 0x238 <lcd_print_uint16+0x26>
	{
		lcd_print_uint16(v / 10);  				 // print higher digits first
 21e:	9c 01       	movw	r18, r24
 220:	ad ec       	ldi	r26, 0xCD	; 205
 222:	bc ec       	ldi	r27, 0xCC	; 204
 224:	0e 94 44 03 	call	0x688	; 0x688 <__umulhisi3>
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
	}
	lcd_data('0' + (v % 10));       				// then print the last digit
 238:	9e 01       	movw	r18, r28
 23a:	ad ec       	ldi	r26, 0xCD	; 205
 23c:	bc ec       	ldi	r27, 0xCC	; 204
 23e:	0e 94 44 03 	call	0x688	; 0x688 <__umulhisi3>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	9e 01       	movw	r18, r28
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	c9 01       	movw	r24, r18
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <lcd_print_float>:


void lcd_print_float(float float_num, uint8_t dec_places)
{
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	4b 01       	movw	r8, r22
 28e:	5c 01       	movw	r10, r24
 290:	d4 2f       	mov	r29, r20
	uint16_t int_part = (uint16_t) float_num; // extracts integer part only from the float number 
 292:	0e 94 1a 02 	call	0x434	; 0x434 <__fixunssfsi>
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24
	
	lcd_print_uint16(int_part); // int part printed 
 29a:	cb 01       	movw	r24, r22
 29c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
	// if the user input is 12.345, then now we printed 12
	lcd_data('.'); // decimal point printed --> now printed 12.
 2a0:	8e e2       	ldi	r24, 0x2E	; 46
 2a2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_data>
	
	we are not prnting fractional value directly, 
	instead we are extracting the digits then print it via integer printing function
	*/
	
	float frVal = float_num - int_part;
 2a6:	b6 01       	movw	r22, r12
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 49 02 	call	0x492	; 0x492 <__floatunsisf>
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	c5 01       	movw	r24, r10
 2b6:	b4 01       	movw	r22, r8
 2b8:	0e 94 ad 01 	call	0x35a	; 0x35a <__subsf3>
	
	for (uint8_t i=0; i< dec_places; i++)
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	1b c0       	rjmp	.+54     	; 0x2f6 <lcd_print_float+0x7e>
	{
		frVal*=10;
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e2       	ldi	r20, 0x20	; 32
 2c6:	51 e4       	ldi	r21, 0x41	; 65
 2c8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__mulsf3>
 2cc:	4b 01       	movw	r8, r22
 2ce:	5c 01       	movw	r10, r24
		uint16_t frToInt = (uint16_t) frVal;
 2d0:	0e 94 1a 02 	call	0x434	; 0x434 <__fixunssfsi>
 2d4:	6b 01       	movw	r12, r22
 2d6:	7c 01       	movw	r14, r24
		lcd_print_uint16(frToInt);
 2d8:	cb 01       	movw	r24, r22
 2da:	0e 94 09 01 	call	0x212	; 0x212 <lcd_print_uint16>
		frVal -= frToInt;
 2de:	b6 01       	movw	r22, r12
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 49 02 	call	0x492	; 0x492 <__floatunsisf>
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
 2ec:	c5 01       	movw	r24, r10
 2ee:	b4 01       	movw	r22, r8
 2f0:	0e 94 ad 01 	call	0x35a	; 0x35a <__subsf3>
	instead we are extracting the digits then print it via integer printing function
	*/
	
	float frVal = float_num - int_part;
	
	for (uint8_t i=0; i< dec_places; i++)
 2f4:	cf 5f       	subi	r28, 0xFF	; 255
 2f6:	cd 17       	cp	r28, r29
 2f8:	18 f3       	brcs	.-58     	; 0x2c0 <lcd_print_float+0x48>
	}
	
	
	
	
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	bf 90       	pop	r11
 308:	af 90       	pop	r10
 30a:	9f 90       	pop	r9
 30c:	8f 90       	pop	r8
 30e:	08 95       	ret

00000310 <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	lcd_init();
 310:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_init>
	lcd_set_cursor(0, 2);
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	lcd_print("Anees Kokadan");
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print>

	lcd_set_cursor(1, 6);
 324:	66 e0       	ldi	r22, 0x06	; 6
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	83 ed       	ldi	r24, 0xD3	; 211
 330:	90 e3       	ldi	r25, 0x30	; 48
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x22>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x2c>
 33c:	00 00       	nop
	
	

	// small demo: print a number
	//lcd_print_uint16(1532);
	lcd_clear();
 33e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clear>
	lcd_set_cursor(0,0);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_set_cursor>
	lcd_print_float(12.345, 3);
 34a:	43 e0       	ldi	r20, 0x03	; 3
 34c:	6f e1       	ldi	r22, 0x1F	; 31
 34e:	75 e8       	ldi	r23, 0x85	; 133
 350:	85 e4       	ldi	r24, 0x45	; 69
 352:	91 e4       	ldi	r25, 0x41	; 65
 354:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_print_float>
 358:	ff cf       	rjmp	.-2      	; 0x358 <main+0x48>

0000035a <__subsf3>:
 35a:	50 58       	subi	r21, 0x80	; 128

0000035c <__addsf3>:
 35c:	bb 27       	eor	r27, r27
 35e:	aa 27       	eor	r26, r26
 360:	0e 94 c5 01 	call	0x38a	; 0x38a <__addsf3x>
 364:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_round>
 368:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_pscA>
 36c:	38 f0       	brcs	.+14     	; 0x37c <__addsf3+0x20>
 36e:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_pscB>
 372:	20 f0       	brcs	.+8      	; 0x37c <__addsf3+0x20>
 374:	39 f4       	brne	.+14     	; 0x384 <__addsf3+0x28>
 376:	9f 3f       	cpi	r25, 0xFF	; 255
 378:	19 f4       	brne	.+6      	; 0x380 <__addsf3+0x24>
 37a:	26 f4       	brtc	.+8      	; 0x384 <__addsf3+0x28>
 37c:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_nan>
 380:	0e f4       	brtc	.+2      	; 0x384 <__addsf3+0x28>
 382:	e0 95       	com	r30
 384:	e7 fb       	bst	r30, 7
 386:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>

0000038a <__addsf3x>:
 38a:	e9 2f       	mov	r30, r25
 38c:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_split3>
 390:	58 f3       	brcs	.-42     	; 0x368 <__addsf3+0xc>
 392:	ba 17       	cp	r27, r26
 394:	62 07       	cpc	r22, r18
 396:	73 07       	cpc	r23, r19
 398:	84 07       	cpc	r24, r20
 39a:	95 07       	cpc	r25, r21
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__addsf3x+0x1c>
 39e:	79 f4       	brne	.+30     	; 0x3be <__addsf3x+0x34>
 3a0:	a6 f5       	brtc	.+104    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3a2:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_zero>
 3a6:	0e f4       	brtc	.+2      	; 0x3aa <__addsf3x+0x20>
 3a8:	e0 95       	com	r30
 3aa:	0b 2e       	mov	r0, r27
 3ac:	ba 2f       	mov	r27, r26
 3ae:	a0 2d       	mov	r26, r0
 3b0:	0b 01       	movw	r0, r22
 3b2:	b9 01       	movw	r22, r18
 3b4:	90 01       	movw	r18, r0
 3b6:	0c 01       	movw	r0, r24
 3b8:	ca 01       	movw	r24, r20
 3ba:	a0 01       	movw	r20, r0
 3bc:	11 24       	eor	r1, r1
 3be:	ff 27       	eor	r31, r31
 3c0:	59 1b       	sub	r21, r25
 3c2:	99 f0       	breq	.+38     	; 0x3ea <__addsf3x+0x60>
 3c4:	59 3f       	cpi	r21, 0xF9	; 249
 3c6:	50 f4       	brcc	.+20     	; 0x3dc <__addsf3x+0x52>
 3c8:	50 3e       	cpi	r21, 0xE0	; 224
 3ca:	68 f1       	brcs	.+90     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3cc:	1a 16       	cp	r1, r26
 3ce:	f0 40       	sbci	r31, 0x00	; 0
 3d0:	a2 2f       	mov	r26, r18
 3d2:	23 2f       	mov	r18, r19
 3d4:	34 2f       	mov	r19, r20
 3d6:	44 27       	eor	r20, r20
 3d8:	58 5f       	subi	r21, 0xF8	; 248
 3da:	f3 cf       	rjmp	.-26     	; 0x3c2 <__addsf3x+0x38>
 3dc:	46 95       	lsr	r20
 3de:	37 95       	ror	r19
 3e0:	27 95       	ror	r18
 3e2:	a7 95       	ror	r26
 3e4:	f0 40       	sbci	r31, 0x00	; 0
 3e6:	53 95       	inc	r21
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <__addsf3x+0x52>
 3ea:	7e f4       	brtc	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3ec:	1f 16       	cp	r1, r31
 3ee:	ba 0b       	sbc	r27, r26
 3f0:	62 0b       	sbc	r22, r18
 3f2:	73 0b       	sbc	r23, r19
 3f4:	84 0b       	sbc	r24, r20
 3f6:	ba f0       	brmi	.+46     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3f8:	91 50       	subi	r25, 0x01	; 1
 3fa:	a1 f0       	breq	.+40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fc:	ff 0f       	add	r31, r31
 3fe:	bb 1f       	adc	r27, r27
 400:	66 1f       	adc	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	c2 f7       	brpl	.-16     	; 0x3f8 <__addsf3x+0x6e>
 408:	0e c0       	rjmp	.+28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 40a:	ba 0f       	add	r27, r26
 40c:	62 1f       	adc	r22, r18
 40e:	73 1f       	adc	r23, r19
 410:	84 1f       	adc	r24, r20
 412:	48 f4       	brcc	.+18     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 414:	87 95       	ror	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b7 95       	ror	r27
 41c:	f7 95       	ror	r31
 41e:	9e 3f       	cpi	r25, 0xFE	; 254
 420:	08 f0       	brcs	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	b0 cf       	rjmp	.-160    	; 0x384 <__addsf3+0x28>
 424:	93 95       	inc	r25
 426:	88 0f       	add	r24, r24
 428:	08 f0       	brcs	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42a:	99 27       	eor	r25, r25
 42c:	ee 0f       	add	r30, r30
 42e:	97 95       	ror	r25
 430:	87 95       	ror	r24
 432:	08 95       	ret

00000434 <__fixunssfsi>:
 434:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_splitA>
 438:	88 f0       	brcs	.+34     	; 0x45c <__fixunssfsi+0x28>
 43a:	9f 57       	subi	r25, 0x7F	; 127
 43c:	98 f0       	brcs	.+38     	; 0x464 <__fixunssfsi+0x30>
 43e:	b9 2f       	mov	r27, r25
 440:	99 27       	eor	r25, r25
 442:	b7 51       	subi	r27, 0x17	; 23
 444:	b0 f0       	brcs	.+44     	; 0x472 <__fixunssfsi+0x3e>
 446:	e1 f0       	breq	.+56     	; 0x480 <__fixunssfsi+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	1a f0       	brmi	.+6      	; 0x458 <__fixunssfsi+0x24>
 452:	ba 95       	dec	r27
 454:	c9 f7       	brne	.-14     	; 0x448 <__fixunssfsi+0x14>
 456:	14 c0       	rjmp	.+40     	; 0x480 <__fixunssfsi+0x4c>
 458:	b1 30       	cpi	r27, 0x01	; 1
 45a:	91 f0       	breq	.+36     	; 0x480 <__fixunssfsi+0x4c>
 45c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fp_zero>
 460:	b1 e0       	ldi	r27, 0x01	; 1
 462:	08 95       	ret
 464:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_zero>
 468:	67 2f       	mov	r22, r23
 46a:	78 2f       	mov	r23, r24
 46c:	88 27       	eor	r24, r24
 46e:	b8 5f       	subi	r27, 0xF8	; 248
 470:	39 f0       	breq	.+14     	; 0x480 <__fixunssfsi+0x4c>
 472:	b9 3f       	cpi	r27, 0xF9	; 249
 474:	cc f3       	brlt	.-14     	; 0x468 <__fixunssfsi+0x34>
 476:	86 95       	lsr	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b3 95       	inc	r27
 47e:	d9 f7       	brne	.-10     	; 0x476 <__fixunssfsi+0x42>
 480:	3e f4       	brtc	.+14     	; 0x490 <__fixunssfsi+0x5c>
 482:	90 95       	com	r25
 484:	80 95       	com	r24
 486:	70 95       	com	r23
 488:	61 95       	neg	r22
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__floatunsisf>:
 492:	e8 94       	clt
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__floatsisf+0x12>

00000496 <__floatsisf>:
 496:	97 fb       	bst	r25, 7
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__floatsisf+0x12>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	99 23       	and	r25, r25
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <__floatsisf+0x40>
 4ac:	f9 2f       	mov	r31, r25
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	bb 27       	eor	r27, r27
 4b2:	93 95       	inc	r25
 4b4:	f6 95       	lsr	r31
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f1 11       	cpse	r31, r1
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <__floatsisf+0x1c>
 4c2:	fa f4       	brpl	.+62     	; 0x502 <__floatsisf+0x6c>
 4c4:	bb 0f       	add	r27, r27
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__floatsisf+0x36>
 4c8:	60 ff       	sbrs	r22, 0
 4ca:	1b c0       	rjmp	.+54     	; 0x502 <__floatsisf+0x6c>
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	16 c0       	rjmp	.+44     	; 0x502 <__floatsisf+0x6c>
 4d6:	88 23       	and	r24, r24
 4d8:	11 f0       	breq	.+4      	; 0x4de <__floatsisf+0x48>
 4da:	96 e9       	ldi	r25, 0x96	; 150
 4dc:	11 c0       	rjmp	.+34     	; 0x500 <__floatsisf+0x6a>
 4de:	77 23       	and	r23, r23
 4e0:	21 f0       	breq	.+8      	; 0x4ea <__floatsisf+0x54>
 4e2:	9e e8       	ldi	r25, 0x8E	; 142
 4e4:	87 2f       	mov	r24, r23
 4e6:	76 2f       	mov	r23, r22
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__floatsisf+0x5e>
 4ea:	66 23       	and	r22, r22
 4ec:	71 f0       	breq	.+28     	; 0x50a <__floatsisf+0x74>
 4ee:	96 e8       	ldi	r25, 0x86	; 134
 4f0:	86 2f       	mov	r24, r22
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	2a f0       	brmi	.+10     	; 0x502 <__floatsisf+0x6c>
 4f8:	9a 95       	dec	r25
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	da f7       	brpl	.-10     	; 0x4f8 <__floatsisf+0x62>
 502:	88 0f       	add	r24, r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__fp_inf>:
 50c:	97 f9       	bld	r25, 7
 50e:	9f 67       	ori	r25, 0x7F	; 127
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	08 95       	ret

00000518 <__fp_nan>:
 518:	9f ef       	ldi	r25, 0xFF	; 255
 51a:	80 ec       	ldi	r24, 0xC0	; 192
 51c:	08 95       	ret

0000051e <__fp_pscA>:
 51e:	00 24       	eor	r0, r0
 520:	0a 94       	dec	r0
 522:	16 16       	cp	r1, r22
 524:	17 06       	cpc	r1, r23
 526:	18 06       	cpc	r1, r24
 528:	09 06       	cpc	r0, r25
 52a:	08 95       	ret

0000052c <__fp_pscB>:
 52c:	00 24       	eor	r0, r0
 52e:	0a 94       	dec	r0
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	05 06       	cpc	r0, r21
 538:	08 95       	ret

0000053a <__fp_round>:
 53a:	09 2e       	mov	r0, r25
 53c:	03 94       	inc	r0
 53e:	00 0c       	add	r0, r0
 540:	11 f4       	brne	.+4      	; 0x546 <__fp_round+0xc>
 542:	88 23       	and	r24, r24
 544:	52 f0       	brmi	.+20     	; 0x55a <__fp_round+0x20>
 546:	bb 0f       	add	r27, r27
 548:	40 f4       	brcc	.+16     	; 0x55a <__fp_round+0x20>
 54a:	bf 2b       	or	r27, r31
 54c:	11 f4       	brne	.+4      	; 0x552 <__fp_round+0x18>
 54e:	60 ff       	sbrs	r22, 0
 550:	04 c0       	rjmp	.+8      	; 0x55a <__fp_round+0x20>
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__fp_split3>:
 55c:	57 fd       	sbrc	r21, 7
 55e:	90 58       	subi	r25, 0x80	; 128
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	59 f0       	breq	.+22     	; 0x57c <__fp_splitA+0x10>
 566:	5f 3f       	cpi	r21, 0xFF	; 255
 568:	71 f0       	breq	.+28     	; 0x586 <__fp_splitA+0x1a>
 56a:	47 95       	ror	r20

0000056c <__fp_splitA>:
 56c:	88 0f       	add	r24, r24
 56e:	97 fb       	bst	r25, 7
 570:	99 1f       	adc	r25, r25
 572:	61 f0       	breq	.+24     	; 0x58c <__fp_splitA+0x20>
 574:	9f 3f       	cpi	r25, 0xFF	; 255
 576:	79 f0       	breq	.+30     	; 0x596 <__fp_splitA+0x2a>
 578:	87 95       	ror	r24
 57a:	08 95       	ret
 57c:	12 16       	cp	r1, r18
 57e:	13 06       	cpc	r1, r19
 580:	14 06       	cpc	r1, r20
 582:	55 1f       	adc	r21, r21
 584:	f2 cf       	rjmp	.-28     	; 0x56a <__fp_split3+0xe>
 586:	46 95       	lsr	r20
 588:	f1 df       	rcall	.-30     	; 0x56c <__fp_splitA>
 58a:	08 c0       	rjmp	.+16     	; 0x59c <__fp_splitA+0x30>
 58c:	16 16       	cp	r1, r22
 58e:	17 06       	cpc	r1, r23
 590:	18 06       	cpc	r1, r24
 592:	99 1f       	adc	r25, r25
 594:	f1 cf       	rjmp	.-30     	; 0x578 <__fp_splitA+0xc>
 596:	86 95       	lsr	r24
 598:	71 05       	cpc	r23, r1
 59a:	61 05       	cpc	r22, r1
 59c:	08 94       	sec
 59e:	08 95       	ret

000005a0 <__fp_zero>:
 5a0:	e8 94       	clt

000005a2 <__fp_szero>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	66 27       	eor	r22, r22
 5a6:	77 27       	eor	r23, r23
 5a8:	cb 01       	movw	r24, r22
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__mulsf3>:
 5ae:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__mulsf3x>
 5b2:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_round>
 5b6:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_pscA>
 5ba:	38 f0       	brcs	.+14     	; 0x5ca <__mulsf3+0x1c>
 5bc:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_pscB>
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__mulsf3+0x1c>
 5c2:	95 23       	and	r25, r21
 5c4:	11 f0       	breq	.+4      	; 0x5ca <__mulsf3+0x1c>
 5c6:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>
 5ca:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_nan>
 5ce:	11 24       	eor	r1, r1
 5d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_szero>

000005d4 <__mulsf3x>:
 5d4:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_split3>
 5d8:	70 f3       	brcs	.-36     	; 0x5b6 <__mulsf3+0x8>

000005da <__mulsf3_pse>:
 5da:	95 9f       	mul	r25, r21
 5dc:	c1 f3       	breq	.-16     	; 0x5ce <__mulsf3+0x20>
 5de:	95 0f       	add	r25, r21
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	55 1f       	adc	r21, r21
 5e4:	62 9f       	mul	r22, r18
 5e6:	f0 01       	movw	r30, r0
 5e8:	72 9f       	mul	r23, r18
 5ea:	bb 27       	eor	r27, r27
 5ec:	f0 0d       	add	r31, r0
 5ee:	b1 1d       	adc	r27, r1
 5f0:	63 9f       	mul	r22, r19
 5f2:	aa 27       	eor	r26, r26
 5f4:	f0 0d       	add	r31, r0
 5f6:	b1 1d       	adc	r27, r1
 5f8:	aa 1f       	adc	r26, r26
 5fa:	64 9f       	mul	r22, r20
 5fc:	66 27       	eor	r22, r22
 5fe:	b0 0d       	add	r27, r0
 600:	a1 1d       	adc	r26, r1
 602:	66 1f       	adc	r22, r22
 604:	82 9f       	mul	r24, r18
 606:	22 27       	eor	r18, r18
 608:	b0 0d       	add	r27, r0
 60a:	a1 1d       	adc	r26, r1
 60c:	62 1f       	adc	r22, r18
 60e:	73 9f       	mul	r23, r19
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	62 1f       	adc	r22, r18
 616:	83 9f       	mul	r24, r19
 618:	a0 0d       	add	r26, r0
 61a:	61 1d       	adc	r22, r1
 61c:	22 1f       	adc	r18, r18
 61e:	74 9f       	mul	r23, r20
 620:	33 27       	eor	r19, r19
 622:	a0 0d       	add	r26, r0
 624:	61 1d       	adc	r22, r1
 626:	23 1f       	adc	r18, r19
 628:	84 9f       	mul	r24, r20
 62a:	60 0d       	add	r22, r0
 62c:	21 1d       	adc	r18, r1
 62e:	82 2f       	mov	r24, r18
 630:	76 2f       	mov	r23, r22
 632:	6a 2f       	mov	r22, r26
 634:	11 24       	eor	r1, r1
 636:	9f 57       	subi	r25, 0x7F	; 127
 638:	50 40       	sbci	r21, 0x00	; 0
 63a:	9a f0       	brmi	.+38     	; 0x662 <__mulsf3_pse+0x88>
 63c:	f1 f0       	breq	.+60     	; 0x67a <__mulsf3_pse+0xa0>
 63e:	88 23       	and	r24, r24
 640:	4a f0       	brmi	.+18     	; 0x654 <__mulsf3_pse+0x7a>
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	bb 1f       	adc	r27, r27
 648:	66 1f       	adc	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	91 50       	subi	r25, 0x01	; 1
 650:	50 40       	sbci	r21, 0x00	; 0
 652:	a9 f7       	brne	.-22     	; 0x63e <__mulsf3_pse+0x64>
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	51 05       	cpc	r21, r1
 658:	80 f0       	brcs	.+32     	; 0x67a <__mulsf3_pse+0xa0>
 65a:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>
 65e:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_szero>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	e4 f3       	brlt	.-8      	; 0x65e <__mulsf3_pse+0x84>
 666:	98 3e       	cpi	r25, 0xE8	; 232
 668:	d4 f3       	brlt	.-12     	; 0x65e <__mulsf3_pse+0x84>
 66a:	86 95       	lsr	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f7 95       	ror	r31
 674:	e7 95       	ror	r30
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	c1 f7       	brne	.-16     	; 0x66a <__mulsf3_pse+0x90>
 67a:	fe 2b       	or	r31, r30
 67c:	88 0f       	add	r24, r24
 67e:	91 1d       	adc	r25, r1
 680:	96 95       	lsr	r25
 682:	87 95       	ror	r24
 684:	97 f9       	bld	r25, 7
 686:	08 95       	ret

00000688 <__umulhisi3>:
 688:	a2 9f       	mul	r26, r18
 68a:	b0 01       	movw	r22, r0
 68c:	b3 9f       	mul	r27, r19
 68e:	c0 01       	movw	r24, r0
 690:	a3 9f       	mul	r26, r19
 692:	70 0d       	add	r23, r0
 694:	81 1d       	adc	r24, r1
 696:	11 24       	eor	r1, r1
 698:	91 1d       	adc	r25, r1
 69a:	b2 9f       	mul	r27, r18
 69c:	70 0d       	add	r23, r0
 69e:	81 1d       	adc	r24, r1
 6a0:	11 24       	eor	r1, r1
 6a2:	91 1d       	adc	r25, r1
 6a4:	08 95       	ret

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
